/* ==== GENERAL ====  */
/*  - Use relative rem instead of absolute px   
    --> Why? 1. Easy way to change ALL measurements with 1 simple setting 
                - e.g. if when hit breakpoint for tablet -- decrease all measurements (change one global setting)
*/
/* Reset default browser CSS   */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* borders and paddings are not added to width and height of box - 
    * i.e. padding does not cause width to increase
    */
  box-sizing: inherit; }

/* set rem in root (html) */
html {
  /* why 62.5%? default size is 16px 62.5 % of 16 is 10 =>  1 rem is now = 10px
        - some user changes default font size (e.g. bad eyes)
        ---> if you use px here instead of % the users default font size won't apply
    */
  font-size: 62.5%; }

/* Why use body for global font ? 
    fonts are inherited by ALL child elements of body
 */
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  line-height: 1.7;
  color: #777;
  padding: 3rem;
  box-sizing: border-box; }

.header {
  /* this box - 95 % of viewport height */
  height: 95vh;
  /* 'two' background images - gradient first - then pic */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  /* whatever width of viewport - always fit element of box */
  background-size: cover;
  /* 'top' of image always focused as we change screen size */
  background-position: top;
  position: relative;
  /* clip out path where you want the element content to be visible
        - i.e. 'make triangle at bottom' - set all 4 cordinates for element
    */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }
  .header__logo-box {
    position: absolute;
    /* Top and left based on parent element - with position relative 
            - on .header
        */
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    /* old school centering */
    position: absolute;
    top: 40%;
    left: 50%;
    /* sets 'center' of box as starting point for left:50% & top:40% */
    transform: translate(-50%, -50%);
    text-align: center; }

.heading-primary {
  color: #FFF;
  text-transform: uppercase;
  /* Fix animation 'shake' */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    /* block occupies entire width + create line breaks */
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /* animation-name: moveInLeft;
        animation-duration: 1s;
        animation-timing-function: ease-out; 
         ==== Same as below
        */
    animation: moveInLeft 1s ease-out;
    /* Sample animations properties */
    /* animation-iteration-count: 3; */
    /* animation-delay: 3s; */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }

@keyframes moveInLeft {
  /* Before animation starts */
  0% {
    opacity: 0;
    /* X is horizontal - 'left -100px' */
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  /* Animation finished */
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  /* Before animation starts */
  0% {
    opacity: 0;
    /* X is horizontal - 'left -100px' */
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  /* Animation finished */
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  /* Before animation starts */
  0% {
    opacity: 0;
    /* X is horizontal - 'left -100px' */
    transform: translateY(3rem); }
  /* Animation finished */
  100% {
    opacity: 1;
    transform: translate(0); } }

.btn {
  /* :link pseudoclass - style element under special states */
  /* when click */
  /* insert content to page from CSS - won't appear in DOM */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    /* inline ---> can use text align in parent (.text-box) */
    display: inline-block;
    border-radius: 10rem;
    /* transition has to be on initial state 
        --> applied on new pseudostates (e.g. :hover ) */
    transition: all .2s;
    position: relative;
    font-size: 1.6rem; }
  .btn--white {
    background-color: #FFF;
    color: #777; }
    .btn--white::after {
      background-color: #FFF; }
  .btn--animated {
    animation: moveInBottom 0.5s ease-out;
    animation-delay: 0.75s;
    /*  apply 0% animation before animation starts */
    animation-fill-mode: backwards; }
  .btn:hover {
    transform: translateY(-0.3rem);
    /* 1: X-direction(0) 2: Y-direction(10px) 3:blur 4: color */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /* When we hover btn apply these ::after styles */ }
    .btn:hover::after {
      /* scale - changes the size - 2 --> double */
      transform: scaleX(1.2) scaleY(1.4);
      opacity: 0; }
  .btn:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 2rem rgba(0, 0, 0, 0.2); }
  .btn::after {
    /* content & display have to be present */
    content: "";
    display: inline-block;
    /* height and width refers to element (e.g. btn) */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* place behind element (.btn) - i.e. hidden */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.4s; }
